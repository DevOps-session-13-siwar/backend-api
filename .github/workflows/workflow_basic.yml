#triger


#push on main branch



    #1 unit test 
    

     
       #checkout code: 

          
       #run unit test
name: Basic Workflow develop

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ${{vars.DOCKERHUB_USERNAME}}/api-session13 
  
jobs:
  run-unit-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: clone source code to runner
        uses: actions/checkout@v5
      
      - name: install dependencies
        run: npm i
       
      - name: run unit test
        run: npm run test

  sonarqube-code-quality-scan-job:
    runs-on: ubuntu-latest
    needs: run-unit-test-job
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  snyk-code-security-scan-job:
   runs-on: ubuntu-latest
   needs: run-unit-test-job
   steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Node.js (if applicable)
      uses: actions/setup-node@v3
      with:
        node-version: "18"

    - name: Install Dependency Scanning Tool (Snyk)
      run: npm install -g snyk

    - name: Snyk Authentication
      run: snyk auth ${{ secrets.SNYC_TOKEN }}

    - name: Run Snyk Test (Continue on error to capture results)
      id: snyk-test
      run: |
        # Run snyk test but don't fail immediately
        snyk test --all-projects || echo "exit_code=$?" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Run Snyk Monitor and Capture URL
      id: snyk-monitor
      run: |
        # Always run monitor to get the URL, even if test failed
        MONITOR_OUTPUT=$(snyk monitor --all-projects --org=siwart8)
        echo "Monitor output: $MONITOR_OUTPUT"

        # Extract monitor URL
        MONITOR_URL=$(echo "$MONITOR_OUTPUT" | grep -o 'https://app.snyk.io/org/[^ ]*' | head -1 || echo "")

        if [ -z "$MONITOR_URL" ]; then
          MONITOR_URL=$(echo "$MONITOR_OUTPUT" | grep -o 'https://app.snyk.io/[^ ]*' | head -1 || echo "")
        fi

        if [ -z "$MONITOR_URL" ]; then
          MONITOR_URL="https://app.snyk.io/org/siwart8/projects"
        fi

        echo "monitor_url=$MONITOR_URL" >> $GITHUB_OUTPUT
        echo "Captured monitor URL: $MONITOR_URL"

    - name: Fail pipeline if vulnerabilities found
      run: |
        # Check if the previous test step failed
        if [ "${{ steps.snyk-test.outcome }}" == "failure" ]; then
          echo "‚ùå Snyk test found vulnerabilities - failing pipeline"
          exit 1
        fi

    - name: notify slack on success
      if: success()
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "text": "‚úÖ *Snyk job Successful* ‚úÖ\nüîÅ Branch: `${{ github.ref_name }}`\nüèó Build: `${{ github.run_number }}`\nüîó [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nüìä [View Snyk Dashboard](${{ steps.snyk-monitor.outputs.monitor_url }})"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: notify slack on failure
      if: failure()
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "text": "‚ùå *Snyk job Failed for Backend-api* ‚ùóÔ∏è\nüîÅ Branch: `${{ github.ref_name }}`\nüîó [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nüìä [View Snyk Dashboard](${{ steps.snyk-monitor.outputs.monitor_url }})\n‚ö†Ô∏è Vulnerabilities were detected in the code"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  build-docker-image-and-push:
    
    runs-on: ubuntu-latest
    needs: [
      sonarqube-code-quality-scan-job,
      snyk-code-security-scan-job,
      
       ]
    if: success()
    steps:
      - name: clone source code to runner
        uses: actions/checkout@v5

      - name: build docker image
        run: docker build -t ${{env.DOCKER_IMAGE}} .
      - run: docker images

      - name: tag docker image with version
        run: docker tag ${{env.DOCKER_IMAGE}} ${{env.DOCKER_IMAGE}}:v${{github.run_number}}

      - run: docker images
      
      - run: echo ${{ vars.DOCKERHUB_USERNAME }}
      - run: echo ${{ secrets.DOCKERHUB_TOKEN}} 

      
      - name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN}}

      - name: push docker image 
        run: docker push ${{ env.DOCKER_IMAGE}}:v${{ github.run_number}}


      - name: push docker image latest
        run: docker push ${{ env.DOCKER_IMAGE}}:latest


  trivy-image-security-scan-job:
    runs-on: ubuntu-latest
    needs: build-docker-image-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y curl

      - name: Download and install Trivy
        run: |
          curl -sSL https://github.com/aquasecurity/trivy/releases/download/v0.29.0/trivy_0.29.0_Linux-64bit.tar.gz -o trivy.tar.gz
          tar xzvf trivy.tar.gz
          sudo mv trivy /usr/local/bin/
          trivy --version

      - name: Run Trivy file system vulnerability scan
        run: |
          trivy fs --exit-code 1 --severity CRITICAL .

      

      - name: Run Trivy Docker image vulnerability scan
        run: |
          trivy image --exit-code 1 --severity CRITICAL ${{ env.DOCKER_IMAGE }}:v${{ github.run_number }}
 
 
  deploy-to-vps:
     
    runs-on: ubuntu-latest
    needs: trivy-image-security-scan-job
    steps:
      - name: execute remote ssh commands using password
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: user
          password: ${{ secrets.VPS_PASSWORD }}
          
          script: | 
            cd /home/user/session13/devops-script/backend-api/dev
            sudo docker-compose pull api
            sudo docker-compose up -d --force-recreate --remove-orphans api

    # 2 build docker image and push
        # checkout code

        

        # build docker image
        
        #tag docker image with version
        
        #login in docker hub
        
        # push docker image

    # 3 deploy to vps
        
        #ssh connection to vps
        # pull docker image
        # run docker container