#triger


#push on main branch



    #1 unit test 
    

     
       #checkout code: 

          
       #run unit test
name: Basic Workflow develop

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ${{vars.DOCKERHUB_USERNAME}}/api-session13 
  
jobs:
  run-unit-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: clone source code to runner
        uses: actions/checkout@v5
      
      - name: install dependencies
        run: npm i
       
      - name: run unit test
        run: npm run test

  sonarqube-code-quality-scan-job:
    runs-on: ubuntu-latest
    needs: run-unit-test-job
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  snyk-code-security-scan-job:
    runs-on: ubuntu-latest
    needs: run-unit-test-job
    steps:

      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Dependency Scanning Tool (Snyk)
        run: npm install -g snyk

      - name: Snyk Authentication
        run: snyk auth ${{ secrets.SNYC_TOKEN }}
       
      
      - name: Run Snyk Vulnerability test
        run: snyk test --all-projects
        continue-on-error: true

      - name: Run Snyk Vulnerability Scan
        run: snyk monitor --all-projects --org=siwart8
        continue-on-error: false
      
      - name: notify slack on success
        if: success()
        uses: slackapi/clack-github-action@v1.23.0
        with:
          payload: |
           {
              "text": "‚úÖ *Snyk job Successful* ‚úÖ\nüîÅ Branch: `${{ github.ref_name }}`\nüèó Build: `${{ github.run_number }}`\nüîó [View Workflow](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nüìä [View Snyk Dashboard](${{ steps.snyk-monitor.outputs.monitor_url }})"
            }
        env:
              SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK}}
      - name: notify slack on failure
        if: failure()
        uses: slackapi/clack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "‚ùå *Snyk job Failed for Backend-api* ‚ùóÔ∏è\nüîÅ Branch: `${{ github.ref_name }}`\nüîó [View Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\nüìä [View Snyk Dashboard](${{ steps.snyk-monitor.outputs.monitor_url }})\n‚ö†Ô∏è Vulnerabilities were detected in the code"
            }
        env:
              SLACK_WEBHOOK_URL: ${{secrets.SLACK_WEBHOOK}}
  build-docker-image-and-push:
    
    runs-on: ubuntu-latest
    needs: [sonarqube-code-quality-scan-job, snyk-code-security-scan-job]
    steps:
      - name: clone source code to runner
        uses: actions/checkout@v5

      - name: build docker image
        run: docker build -t ${{env.DOCKER_IMAGE}} .
      - run: docker images

      - name: tag docker image with version
        run: docker tag ${{env.DOCKER_IMAGE}} ${{env.DOCKER_IMAGE}}:v${{github.run_number}}

      - run: docker images
      
      - run: echo ${{ vars.DOCKERHUB_USERNAME }}
      - run: echo ${{ secrets.DOCKERHUB_TOKEN}} 

      
      - name: login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN}}

      - name: push docker image 
        run: docker push ${{ env.DOCKER_IMAGE}}:v${{ github.run_number}}


      - name: push docker image latest
        run: docker push ${{ env.DOCKER_IMAGE}}:latest

  deploy-to-vps:
     
    runs-on: ubuntu-latest
    needs: build-docker-image-and-push
    steps:
      - name: execute remote ssh commands using password
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          username: user
          password: ${{ secrets.VPS_PASSWORD }}
          
          script: | 
            cd /home/user/session13/devops-script/backend-api/dev
            sudo docker-compose pull api
            sudo docker-compose up -d --force-recreate --remove-orphans api

    # 2 build docker image and push
        # checkout code

        

        # build docker image
        
        #tag docker image with version
        
        #login in docker hub
        
        # push docker image

    # 3 deploy to vps
        
        #ssh connection to vps
        # pull docker image
        # run docker container